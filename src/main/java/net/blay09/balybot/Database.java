package net.blay09.balybot;

import org.intellij.lang.annotations.Language;

import java.sql.*;

public class Database {

	public enum Type {
		SQLITE,
		MYSQL
	}

    private static Connection connection;

	private static PreparedStatement replaceConfig;
	private static PreparedStatement insertChannel;
	private static PreparedStatement updateChannelActive;
	private static PreparedStatement replaceModule;
	private static PreparedStatement deleteModule;

    public static void setup() throws ClassNotFoundException, SQLException {
		if(Config.getDatabaseType() == Type.SQLITE) {
			Class.forName("org.sqlite.JDBC");
			connection = DriverManager.getConnection("jdbc:sqlite:" + Config.getDatabaseName());
		} else if(Config.getDatabaseType() == Type.MYSQL) {
			Class.forName("com.mysql.cj.jdbc.Driver");
			connection = DriverManager.getConnection("jdbc:mysql://" + Config.getDatabaseHost() + "/" + Config.getDatabaseName() + "?user=" + Config.getDatabaseUser() + "&password=" + Config.getDatabasePassword() + "&useSSL=false&serverTimezone=UTC");
		}

		execute("CREATE TABLE IF NOT EXISTS channels (channel_id INTEGER PRIMARY KEY " + autoIncrementOrEmpty() + ", channel_name VARCHAR(64) NOT NULL, channel_active BOOLEAN DEFAULT TRUE)");
		execute("CREATE TABLE IF NOT EXISTS modules (module_channel INTEGER, module_id VARCHAR(64) NOT NULL, PRIMARY KEY(module_channel, module_id))");
		execute("CREATE TABLE IF NOT EXISTS config (config_channel INTEGER, config_name VARCHAR(64) NOT NULL, config_value TEXT NOT NULL, PRIMARY KEY(config_channel, config_name))");

		insertChannel = connection.prepareStatement("INSERT INTO channels (channel_name) VALUES (?)", Statement.RETURN_GENERATED_KEYS);
		updateChannelActive = connection.prepareStatement("UPDATE channels SET channel_active = ? WHERE channel_id = ?");
		replaceConfig = connection.prepareStatement("REPLACE INTO config (config_channel, config_name, config_value) VALUES (?, ?, ?)");
		replaceModule = connection.prepareStatement("REPLACE INTO modules (module_channel, module_id) VALUES(?, ?)");
		deleteModule = connection.prepareStatement("DELETE FROM modules WHERE module_channel = ? AND module_id = ?");
    }

	public static String autoIncrementOrEmpty() {
		return Config.getDatabaseType() == Type.MYSQL ? "AUTO_INCREMENT" : "";
	}

	public static Statement createStatement() throws SQLException {
        return connection.createStatement();
    }

	public static PreparedStatement prepareStatement(String sql) throws SQLException {
		return connection.prepareStatement(sql);
	}

    public static PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }

    public static void execute(@Language("SQL") String sql) throws SQLException {
        Statement stmt = connection.createStatement();
        stmt.execute(sql);
        stmt.close();
    }



	public static int dbInsertChannel(String channelName) throws SQLException {
		insertChannel.setString(1, channelName);
		insertChannel.execute();
		ResultSet rs = insertChannel.getGeneratedKeys();
		if(rs.next()) {
			return rs.getInt(1);
		}
		return 0;
	}

	public static void dbUpdateChannelActive(String channelName, boolean active) throws SQLException {
		updateChannelActive.setInt(1, ChannelManager.getId(channelName));
		updateChannelActive.setBoolean(2, active);
		updateChannelActive.execute();
	}

	public static void dbReplaceConfig(String channelName, String option, String value) throws SQLException {
		replaceConfig.setInt(1, ChannelManager.getId(channelName));
		replaceConfig.setString(2, option);
		replaceConfig.setString(3, value);
		replaceConfig.execute();
	}

	public static void dbReplaceModule(String channelName, String moduleId) throws SQLException {
		replaceModule.setInt(1, ChannelManager.getId(channelName));
		replaceModule.setString(2, moduleId);
		replaceModule.execute();
	}

	public static void dbDeleteModule(String channelName, String moduleId) throws SQLException {
		deleteModule.setInt(1, ChannelManager.getId(channelName));
		deleteModule.setString(2, moduleId);
		deleteModule.execute();
	}
}
