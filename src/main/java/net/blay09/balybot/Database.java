package net.blay09.balybot;

import org.intellij.lang.annotations.Language;

import java.sql.*;

public class Database {

	public enum Type {
		SQLITE,
		MYSQL
	}

    private static Connection connection;

	private static PreparedStatement setChannelConfig;
	private static PreparedStatement addNewChannel;
	private static PreparedStatement setChannelActive;
	private static PreparedStatement activateModule;
	private static PreparedStatement deactivateModule;

    public static void setup() throws ClassNotFoundException, SQLException {
		if(Config.getDatabaseType() == Type.SQLITE) {
			Class.forName("org.sqlite.JDBC");
			connection = DriverManager.getConnection("jdbc:sqlite:" + Config.getDatabaseName());
		} else if(Config.getDatabaseType() == Type.MYSQL) {
			Class.forName("com.mysql.cj.jdbc.Driver");
			connection = DriverManager.getConnection("jdbc:mysql://" + Config.getDatabaseHost() + "/" + Config.getDatabaseName() + "?user=" + Config.getDatabaseUser() + "&password=" + Config.getDatabasePassword() + "&useSSL=false&serverTimezone=UTC");
		}

		createTable("modules", true,
				"`name` VARCHAR(64) NOT NULL",
				"`friendly_name` VARCHAR(256) NOT NULL");
		createTable("servers", true,
				"`host` VARCHAR(256) NOT NULL",
				"`type` INTEGER");
		createTable("channels", true,
				"`server_fk` INTEGER",
				"`name` VARCHAR(64) NOT NULL",
				"`is_active` BOOLEAN DEFAULT TRUE");
		createTable("active_modules", false,
				"`channel_fk` INTEGER",
				"`module_fk` INTEGER",
				"PRIMARY KEY(`channel_fk`, `module_fk`)");
		createTable("channel_config", false,
				"`channel_fk` INTEGER",
				"`name` VARCHAR(64)",
				"`value` TEXT NOT NULL",
				"PRIMARY KEY(`channel_fk`, `name`)");

		addNewChannel = connection.prepareStatement("INSERT INTO `channels` (`name`) VALUES (?)", Statement.RETURN_GENERATED_KEYS);
		setChannelActive = connection.prepareStatement("UPDATE `channels` SET `is_active` = ? WHERE `id` = ?");
		setChannelConfig = connection.prepareStatement("REPLACE INTO `channel_config` (`channel_fk`, `name`, `value`) VALUES (?, ?, ?)");
		activateModule = connection.prepareStatement("REPLACE INTO `active_modules` (`channel_fk`, `module_fk`) VALUES(?, ?)");
		deactivateModule = connection.prepareStatement("DELETE FROM `active_modules` WHERE `channel_fk` = ? AND `module_fk` = ?");
    }

	public static void createTable(String tableName, boolean withId, String... fields) throws SQLException {
		StringBuilder sb = new StringBuilder();
		sb.append("CREATE TABLE IF NOT EXISTS ");
		sb.append('`').append(tableName).append('`');
		sb.append(" (");
		if(withId) {
			sb.append("id INTEGER PRIMARY KEY");
			if(Config.getDatabaseType() == Type.MYSQL) {
				sb.append(" AUTO_INCREMENT");
			}
			sb.append(", ");
		}
		for(int i = 0; i < fields.length; i++) {
			if(i > 0) {
				sb.append(", ");
			}
			sb.append(fields[i]);
		}
		sb.append(")");
		execute(sb.toString());
	}

	public static Statement createStatement() throws SQLException {
        return connection.createStatement();
    }

	public static PreparedStatement prepareStatement(String sql) throws SQLException {
		return connection.prepareStatement(sql);
	}

    public static PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }

    public static void execute(@Language("SQL") String sql) throws SQLException {
        Statement stmt = connection.createStatement();
        stmt.execute(sql);
        stmt.close();
    }



	public static int dbInsertChannel(String channelName) throws SQLException {
		addNewChannel.setString(1, channelName);
		addNewChannel.execute();
		ResultSet rs = addNewChannel.getGeneratedKeys();
		if(rs.next()) {
			return rs.getInt(1);
		}
		return 0;
	}

	public static void dbUpdateChannelActive(String channelName, boolean active) throws SQLException {
		setChannelActive.setInt(1, ChannelManager.getId(channelName));
		setChannelActive.setBoolean(2, active);
		setChannelActive.execute();
	}

	public static void dbReplaceConfig(String channelName, String option, String value) throws SQLException {
		setChannelConfig.setInt(1, ChannelManager.getId(channelName));
		setChannelConfig.setString(2, option);
		setChannelConfig.setString(3, value);
		setChannelConfig.execute();
	}

	public static void dbReplaceModule(String channelName, String moduleId) throws SQLException {
		activateModule.setInt(1, ChannelManager.getId(channelName));
		activateModule.setString(2, moduleId);
		activateModule.execute();
	}

	public static void dbDeleteModule(String channelName, String moduleId) throws SQLException {
		deactivateModule.setInt(1, ChannelManager.getId(channelName));
		deactivateModule.setString(2, moduleId);
		deactivateModule.execute();
	}
}
